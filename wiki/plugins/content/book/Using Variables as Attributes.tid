created: 20240616152105208
description: Macros extend the concept of variables by allowing portions of the value to change each time the macro is referenced.
modified: 20240616161224297
parent: Variables, Macros, and Transclusions
tags: Section Concept
title: Using Variables as Attributes
type: text/vnd.tiddlywiki

In the [[previous section|Variables]], we saw how we can use the values of variables within running text. But we can also use variables within other formatting instructions -- as the ''values of attributes'' on widgets or HTML tags.

You've already done this once already in the [[link pattern|Ex:LinkPattern]] exercise in [[Your First Dynamic List]], before we understood that `<<currentTiddler>>` was a variable:

```html
<$link to=<<currentTiddler>>/>
```

In some basic sense, then, using variables as attributes is no different than using them elsewhere. However, there are some traps for the unwary when it comes to mixing variables and other wikitext elements. Fully elucidating all of these requires much more understanding of TiddlyWiki, so we won't cover all of them in this section, but we'll get a good start.


!! Multiple links to the same place

Suppose we want to link to the Wikipedia homepage multiple times. If we want the same text on the link each time, we can simply put the wikitext needed to create the link in a variable and refer to it several times, like this:

{{Sn:WikipediaWikitext||MagicSnippet}}

But what if we want to use different text for the link each time? You might try this:

{{Sn:WikipediaBadWikitext||MagicSnippet}}

Unfortunately, variable references ''can't be nested inside other complex wikitext elements like links'', so this doesn't work. If you try clicking on one of the links in the example above, you'll see that TiddlyWiki produces a link to the tiddler literally called `<<wp>>`, which isn't very helpful!

However, variable references //do// work as attribute values. So an easy solution is to use an `a` HTML element instead of wikitext syntax. This element takes the URL to link to in its `href` attribute and the text to display in its body. (`href` stands for //hypertext reference//, and `a` for //anchor//.)

{{Sn:WikipediaAElement||MagicSnippet}}


!! Multiple links to different Wikipedia articles

That worked, but it's hard to see a real-life situation where that example would be useful -- how often do you want to link to the same Wikipedia article multiple times?

Here's a better idea. Wikipedia article URLs have a very predictable format: for an article named `Article Name` in the English encyclopedia, the URL looks like `https://en.wikipedia.org/wiki/Article Name`. The only part that ever changes is the name of the article. Can we use a variable to hold the part of the URL that doesn't change? Then we could produce a working link to any article given only its title.

The most obvious thing to try would be:

{{Sn:WikipediaCombinedVarSubst||MagicSnippet}}

That looks OK, but if you click on the link you'll find that it goes to a page called `<<wpBase>>/Aardvark`, which obviously isn't what we wanted.

Maybe the variable reference needs to go outside the quotation marks?

{{Sn:WikipediaCombinedVarSubst2||MagicSnippet}}

Uh-oh!

It turns out that we need an entirely new syntax to achieve this. We can use //just// a variable reference as the value of an attribute by writing it directly after the `=`, as we did earlier in this section. Or we can use //just// a constant value (one with no variables) by placing it in `"double quotation marks"` after the `=`. But if we want to combine a constant value and one or more variables, we need to use a ''substituted attribute value'', which looks like this:

{{Sn:WikipediaSubAttrValue||MagicSnippet}}

Those funny <code>&#96;</code>'s are called ''backticks''. On a standard US keyboard, you can find the backtick (also called the grave accent) to the left of the 1 key. Other keyboards have it in weirder places or even on the AltGr layer; you may have to do a quick web search to learn how to type it on your keyboard.

Within a substituted attribute value, the syntax `$(wpBase)$` refers to the variable `wpBase`. The way in which this differs from `<<wpBase>>` is somewhat arcane, so we'll hold off on discussing it until the [[Text Substitution]] section. For now, suffice it to say that you should refer to variables with this `$()$` syntax within substituted attribute values.


!! Exercises


!! Takeaways

{{||TakeawaysTemplate}}