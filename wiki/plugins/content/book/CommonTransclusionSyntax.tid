created: 20240928014613139
modified: 20240928021133579
tags: 
title: CommonTransclusionSyntax
type: text/vnd.tiddlywiki

<!-- Set version to 'first' for the initial version of the syntax, and 'second' for the later one with more info -->
\parameters(version)
\function .later() [<version>match[second]]

<% if [<version>is[blank]] %>
  ''[WARNING: This tiddler is intended to be read transcluded with a `version` parameter in different places in the wiki depending on how much of this syntax you have learned by the section it appears in. Currently you are viewing this tiddler without any such parameter, and you may not be seeing all of the content in it.]''
<% endif %>

!! Available in wikitext and filter expressions

The following types of references work both within [[wikitext|Wikitext]] and [[filter expressions|Filters and Transclusions]]. In filter expressions, you use only ''one of each type of bracket''. In wikitext, you use two.

; `[[square brackets]]`
: To link or refer to the title of a tiddler.

; `<<angle brackets>>`
: To get the value of a [[variable|Variables]] or call a [[procedure|Procedures]]<% if [.later[]] %>, [[function|Functions]], or [[macro|Macros]]<% endif %>.

; `{{curly braces}}`
: To [[transclude the value of|Transclusions]] a field of a tiddler.

<ul>
  <li>`{{tiddler}}` to transclude the `text` field of a tiddler</li>
  <li>`{{tiddler!!field}}` to transclude a different field of a tiddler</li>
  <% if [.later[]] %><li>`{{tiddler##index}}` to transclude a property of a [[data tiddler|Data Tiddlers]]</li><% endif %>
  <li>`{{!!field}}` to transclude a field of the [[current tiddler|Templates and the Current Tiddler]]</li>
  <li>`{{tiddler||Template}}` to transclude a tiddler [[through a template|Templates and the Current Tiddler]]</li>
  <li>`{{||Template}}` to transclude the current tiddler through a template</li>
  <li>`{{tiddler|param1|param2|...}}` to transclude a tiddler with parameters (optionally with either `!!` or `||` syntax before the first `|` to transclude an arbitrary field or perform a template transclusion, respectively)</li>
</ul>

!! Available only within wikitext

; `{{{ triple curly braces }}}`
: To select one or more tiddlers using a filter, [[then transclude them|Filters and Transclusions]]. You can think of this as the “super” or “extra powerful” version of normal double-brace transclusion, since it has one extra brace.

As you might have worked out from the heading “Available only within wikitext”, this form is not available inside another filter expression; if you need to nest filter expressions this way, store the results of the inner filter expression [[in a variable|Variables]] and then transclude the value of that variable into the outer filter expression.


!! Available only within attribute values

Backticks can be used to combine constant text and variables and/or the results of filter expressions into a single attribute of a widget or HTML element.

<dl>
  <dt><code>`<$widget attribute=`&#96;text with a $(variable)$ in it&#96;/></code></dt>
  <dd>To [[combine|Using Variables as Attributes]] constant text and one or more variables (in `$(these thingies)$`) into the value of an attribute</dd>
  <% if [.later[]] %>
    <dt><code>`<$widget attribute=`&#96;text with a `${ [[filter expression]] } in it`&#96;/></code></dt>
    <dd>To combine constant text and the result of one or more filter expressions (in `${ these thingies }$` into the value of an attribute</dd>
  <% endif %>
</dl>

<% if [.later[]] %>


!! Available only within macros

[[Macros]] have special syntax to perform direct text substitution.

* `<<angle brackets>>` refer to a variable without text substitution. (This is the same standard syntax available outside a macro and is included here for comparison with the following three items.)
* `<<__angle brackets with underscores__>>` refer to a parameter of the macro without text substitution. (In a procedure, you would just use normal `<<angle brackets>>`.) Inside a filter expression, use `<__single angle brackets but double underscores__>`.
* `$(parenthesized dollar signs)$` refer to a variable using text substitution.
* `$dollar signs$` refer to a parameter of the macro using text substitution.

Neither the `<<variable>>` nor the `<<__parameter__>>` syntax works if the contents of your macro [[will not be wikified|Wikification]] where you intend to call it -- just as it doesn't work in a procedure.

<% endif %>