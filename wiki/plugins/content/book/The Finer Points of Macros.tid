created: 20200603210614777
description: Macros come in many forms.
modified: 20240727194723386
parent: Variables, Procedures, and Transclusions
tags: Section
title: The Finer Points of Macros
type: text/vnd.tiddlywiki

We just skimmed the surface of macros in the previous section, and you may be left with quite a few questions. Let's try to tackle some of the most important ones.

{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget}}

<$details summary="Macros have scope">

In the [[Variables]] section, we learned that after the closing `</$set>` tag, a variable goes out of scope and is no longer available for use. So you might wonder, what's the scope of a macro?

The answer is, generally, the macro is available until the end of the tiddler. It's also possible to define //global macros// -- ones that you can use across any tiddler in your wiki. We'll discuss how to do that [[later|Global Macros]].

</$details><$details summary="Macros can have zero parameters">

It's possible, and even common, to have a macro with //no// parameters, which is just a different way of writing a variable (potentially with a greater scope). For instance, this is equivalent to the example of the corporate disclaimer previously discussed in the [[Variables]] section:

{{Sn:ParameterlessMacro||MagicSnippet}}


</$details><$details summary="Macros can have multiple parameters">

Let's come back to our good old `wikipediaLink` macro again. Let's say we want the user to be able to specify the text as well as the article we're linking to. Here's how we can do that:

{{Sn:MultipleParameterMacro||MagicSnippet}}

Note that parameters are separated by a space in the macro call but by a comma in the macro definition. No, this doesn't really make any sense, but a lot of programming languages do it this way too.

Also notice the use of "double quotation marks" when a macro parameter contains spaces.


</$details><$details summary="Macros can be called with parameters containing double quotes">

A moment ago, we saw that you can include spaces in a macro parameter by surrounding it in double quotes. But what happens when the parameter also contains double quotes? Uh-oh:

{{Sn:QuoteWithinQuotesMacro||MagicSnippet}}

In this case, we can use //triple// double quotes:

{{Sn:TripleDoublesMacro||MagicSnippet}}

This trick works elsewhere in TiddlyWiki as well, if you ever find yourself needing to quote something that contains quotes.

</$details><$details summary="Macros can be called with parameter names">

If we don't like the order that the macro parameters are specified in, or there are a lot of parameters and it's hard to remember what order they come in, we can list the parameters by name. If we do this, the order becomes unimportant.

{{Sn:MacroParameterNames||MagicSnippet}}

Sometimes this is called using //named parameters//, in contrast to using //positional parameters//.

A space may optionally be added after the colon `:`, but most people find it easier to read without a space.


</$details><$details summary="Macros can have optional parameters">

We can specify a default value for a parameter. Then we only need to provide a value in the macro call if we don't like the default:

{{Sn:DefaultMacroParameterValues||MagicSnippet}}

Again, a space may optionally be added after the colon.

</$details><$details summary="Macros can be defined on a single line">

You can place short macros that contain only one line on the same line as the `\define` pragma and omit the `\end`:

{{Sn:SingleLineMacro||MagicSnippet}}


</$details><$details summary="Macros can be called using a $macrocall widget">

In addition to the handy `<<double angle bracket>>` syntax, it's possible to call a macro using a `$macrocall` [[widget|Widgets]]. As we discussed in the widgets section, this is a common pattern in TiddlyWiki: anything you can do with convenient wikitext syntax can also be done with HTML tags or widgets, and those forms may offer some additional options for advanced use.

Here's how we could create our aardvark link with a widget:

{{Sn:SimpleMacrocallWidget||MagicSnippet}}

Notice the dollar sign in front of `$name`, which is easily missed. (This is in case your macro has a parameter called `name` -- then TiddlyWiki can tell them apart.)


</$details><$details summary="The $macrocall widget can take variables as parameters">

From the above, it was probably not immediately obvious why you would ever want to write out a macro call the long way. Here's the main reason why: you can pass in //other variables or macro calls// as parameters to the macro. For instance, maybe we want to link to a few different Wikipedia pages, but use the same link name:

{{Sn:TranscludedMacrocallWidget||MagicSnippet}}

</$details>


!! Exercises

{{Ex:TicketTrackingLink||ExerciseTemplate}}
{{Ex:MacroCallAsParameter||ExerciseTemplate}}
{{Ex:QuotedMacroCall||ExerciseTemplate}}
{{Ex:UnclosedMacroCall||ExerciseTemplate}}


!! Takeaways

{{||TakeawaysTemplate}}