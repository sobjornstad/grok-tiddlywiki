created: 20240928021442847
description: Write custom widgets that get transcluded in place of TiddlyWiki's built-in widgets.
modified: 20241017004756313
parent: Looking Under the Hood
tags: Section
title: Overriding Built-In Widgets
type: text/vnd.tiddlywiki

When we discussed [[Custom Widgets]] in <<gtw.link-chapter-number "Macros, Wikification, and Widgets">>, we talked about how you can create new widgets. But you can also ''replace a built-in widget'' with a custom widget. This obviously must be done with caution, since it can have effects that reach deep into the core code of TiddlyWiki, but it's a powerful feature that can be a very convenient way to add custom behaviors. To achieve this, we simply define a new `\widget` with the same name as the one we want to override (in this case, you don't need, and indeed can't have, a `.` in the name of the custom widget, like you normally do).

As a silly example, suppose we want to completely inhibit internal linking. We can override the `$link` widget to ignore all of its parameters and only render the link text in the body of the widget:

{{Sn:LinkInhibition||MagicSnippet}}

!! Referencing the original widget

In most practical scenarios, we're not trying to replace an existing widget entirely -- rather, we want to ''wrap it in some other wikitext'' or change the values of its attributes in some systematic way. Therefore, we'll want to use some version of the original widget within the custom widget.

However, if we just directly include a `$link` widget inside the definition of the `$link` widget, TiddlyWiki will try to transclude the custom widget within itself over and over again, recognize that it's stuck in an infinite loop, and give up on rendering the widget. We instead need to use the <a class="tc-tiddlylink-external" href="https://tiddlywiki.com/#GenesisWidget">`$genesis`</a> meta-widget, which creates another widget of an arbitrary type, to retrieve the original widget instead of our custom version.

As an example, here's something more useful we can do by overriding the `$link` widget: if a tiddler has a `description` field, add a tooltip showing the `description` field on the link's tooltip.

{{Sn:LinkTooltipification||MagicSnippet}}

The `$type` parameter of the `$genesis` widget is the name of the widget we're trying to render. The `$remappable` parameter is the magic: setting this to `no` forces the original, built-in widget definition to be used, rather than our custom definition. Lastly, all parameters that don't start with dollar signs are passed as parameters to the newly created widget.

Try hovering over the links above – you'll see the descriptions appear as tooltips!

//Word to the wise//: When overriding a built-in widget, ''always test your changes within a single tiddler'' and make sure they work as expected prior to tagging the new version with `$:/tags/Global`. If you make a mistake and override a widget critical to TiddlyWiki's operation with a broken version, you may find yourself unable to get back into the editor to restore the default behavior! (If you //do// make such a mistake, you can manually edit the HTML file or tiddler file in a text editor to remove the faulty wikitext and restart TiddlyWiki – this will not cause permanent data loss, it'll just be annoying.)


!! Exercises

{{Ex:LinkTooltipNonReplace||ExerciseTemplate}}
{{Ex:SaveOptionalParameters||ExerciseTemplate}}
{{Ex:EqualsPrefixNeeded||ExerciseTemplate}}


!! Takeaways

{{||TakeawaysTemplate}}